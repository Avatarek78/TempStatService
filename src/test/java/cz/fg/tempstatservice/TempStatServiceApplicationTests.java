package cz.fg.tempstatservice;

import cz.fg.tempstatservice.common.TempRange;
import cz.fg.tempstatservice.common.TestTemperatureData;
import cz.fg.tempstatservice.configuration.MemDbTestConfig;
import cz.fg.tempstatservice.entities.ResponseMessage;
import cz.fg.tempstatservice.entities.Temperature;
import cz.fg.tempstatservice.entities.TemperaturePeriod;
import cz.fg.tempstatservice.utils.TestUtils;
import cz.fg.tempstatservice.utils.TimeUtils;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.skyscreamer.jsonassert.JSONAssert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.*;
import org.springframework.test.context.junit4.SpringRunner;

import java.math.BigInteger;
import java.util.HashMap;

import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertThat;

/**
 * Integration test of whole application. Launch the entire Spring Boot Application on a Random Port.
 * All REST API methods are being tested. Test H2 database is used instead of production database.
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
		TempStatServiceApplication.class,
		MemDbTestConfig.class,
		TestTemperatureData.class
}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class TempStatServiceApplicationTests {

	private final Logger logger = LoggerFactory.getLogger(TempStatServiceApplicationTests.class);

	@LocalServerPort
	private int port;

	@Autowired
	private TestTemperatureData data;

	private TestRestTemplate restTemplate = new TestRestTemplate();

	private HttpHeaders headers = new HttpHeaders();

	private static HashMap<Long, Temperature> allTemperaturesMap = new HashMap<>();

	@Before
	public void setUp() throws Exception {
		if (allTemperaturesMap.isEmpty()) {
			addTemperatures();
		}
	}

	/**
	 * Test of Add Temperature records by add all test records through REST API.
	 * @throws JSONException
	 */
	private void addTemperatures() throws JSONException {
		for (Temperature temperature : data.getAllTemperatures()) {
			addTemperature(temperature);
		}
	}

	/**
	 * Add Temperature record through REST API.
	 * @param temperature
	 * @throws JSONException
	 */
	private void addTemperature(Temperature temperature) throws JSONException {
		HttpEntity<Temperature> entity = new HttpEntity<>(temperature, headers);
		ResponseEntity<String> response = restTemplate.exchange(createURL(""), HttpMethod.POST, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.CREATED));
		// Gets id generated by database and sets them into test Temperature entity.
		JSONObject tempJson = new JSONObject(response.getBody());
		temperature.setId(tempJson.getLong("id"));
		// Stores temperature into map under id as key for later testing purposes.
		allTemperaturesMap.put(temperature.getId(), temperature);
		String expected = TestUtils.objToJsonString(temperature);
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of List all temperatures.
	 * @throws JSONException
	 */
	@Test
	public void checkGetAllTemperatures() throws JSONException {
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		ResponseEntity<String> response = restTemplate.exchange(createURL(""), HttpMethod.GET, entity, String.class);
        assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		String expected = TestUtils.objToJsonString(data.getAllTemperatures());
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of Get existing Temperature Record.
	 * @throws JSONException
	 */
	@Test
	public void checkGetTemperatureById() throws JSONException {
		Long id = 1L;
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		ResponseEntity<String> response = restTemplate.exchange(createURL("/" + id), HttpMethod.GET, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		String expected = TestUtils.objToJsonString(allTemperaturesMap.get(id));
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
		// Check attempt to get non existing record.
		response = restTemplate.exchange(createURL("/1000"), HttpMethod.GET, entity, String.class);
		expected = TestUtils.objToJsonString(new ResponseMessage("Temperature with ID '1000' doesn't exists"));
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of Update existing Temperature record.
	 * @throws JSONException
	 */
	@Test
	public void checkUpdateTemperatureById() throws JSONException {
		Long id = 1L;
		// Change only temperature value
		Temperature tempChange = new Temperature();
		tempChange.setTempValue(data.getFirstTempRange().getHigh());
		HttpEntity<Temperature> entity = new HttpEntity<>(tempChange, headers);
		ResponseEntity<String> response = restTemplate.exchange(createURL("/" + id), HttpMethod.PUT, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		// Expected value is original Temperature entity with changed temp value.
		Temperature tempExpected = allTemperaturesMap.get(id);
		tempExpected.setTempValue(tempChange.getTempValue());
		String expected = TestUtils.objToJsonString(tempExpected);
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of Get by temperature range.
	 * @throws JSONException
	 */
	@Test
	public void checkGetTemperaturesByTempRange() throws JSONException {
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		TempRange tempRange = data.getFirstTempRange();
		String uri = "/" + "?lowTemp=" + tempRange.getLow() + "&highTemp=" + tempRange.getHigh();
		ResponseEntity<String> response = restTemplate.exchange(createURL(uri), HttpMethod.GET, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		String expected = TestUtils.objToJsonString(data.getFirstTempList());
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);

	}

	/**
	 * Test of Get by date and time range.
	 * @throws JSONException
	 */
	@Test
	public void checkGetTemperaturesByDateAndTime() throws JSONException {
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		String dateFrom = TimeUtils.dateToString(data.getMiddleTempListA().getFirst().getDateAndTime());
		String dateTo = TimeUtils.dateToString(data.getMiddleTempListA().getLast().getDateAndTime());
		String uri = "/" + "?dateFrom=" + dateFrom + "&dateTo=" + dateTo;
		ResponseEntity<String> response = restTemplate.exchange(createURL(uri), HttpMethod.GET, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		String expected = TestUtils.objToJsonString(data.getMiddleTempListA());
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of Get longest period by low and high temperature.
	 * @throws JSONException
	 */
	@Test
	public void checkFindLongestPeriodByTempRange() throws JSONException {
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		TempRange tempRange = data.getFirstTempRange();
		String uri = "/statistics/" + "?lowTemp=" + tempRange.getLow() + "&highTemp=" + tempRange.getHigh();
		ResponseEntity<String> response = restTemplate.exchange(createURL(uri), HttpMethod.GET, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		TempRange expectedTempRange = TestUtils.getMinAndMaxTemperature(data.getFirstTempList());
		TemperaturePeriod expectedPeriod = new TemperaturePeriod(
				data.getFirstTempList().getFirst().getDateAndTime(),
				data.getFirstTempList().getLast().getDateAndTime(),
				expectedTempRange.getLow(),
				expectedTempRange.getHigh(),
				BigInteger.valueOf(data.getFirstTempList().size())
		);
		String expected = TestUtils.objToJsonString(expectedPeriod);
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of Get longest period by low and high temperature between hours of day.
	 * @throws JSONException
	 */
	@Test
	public void checkFindLongestPeriodByTempRangeAndDayPeriod() throws JSONException {
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		TempRange tempRange = data.getMiddleTempRange();
		String uri = "/statistics/" + "?lowTemp=" + tempRange.getLow() + "&highTemp=" + tempRange.getHigh() + "&hourFrom=18&hourTo=20";
		ResponseEntity<String> response = restTemplate.exchange(createURL(uri), HttpMethod.GET, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		TempRange expectedTempRange = TestUtils.getMinAndMaxTemperature(data.getMiddleTempListB());
		TemperaturePeriod expectedPeriod = new TemperaturePeriod(
				data.getMiddleTempListB().getFirst().getDateAndTime(),
				data.getMiddleTempListB().getLast().getDateAndTime(),
				expectedTempRange.getLow(),
				expectedTempRange.getHigh(),
				BigInteger.valueOf(data.getMiddleTempListB().size())
		);
		String expected = TestUtils.objToJsonString(expectedPeriod);
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
	}

	/**
	 * Test of Delete existing Temperature record.
	 * @throws JSONException
	 */
	@Test
	public void checkDeleteTemperatureById() throws JSONException {
		Long id = data.getAllTemperatures().getLast().getId();
		HttpEntity<String> entity = new HttpEntity<>(null, headers);
		ResponseEntity<String> response = restTemplate.exchange(createURL("/" + id), HttpMethod.DELETE, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.OK));
		String expected = TestUtils.objToJsonString(new ResponseMessage("Temperature with ID: " + id + " was deleted"));
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
		// Check if record is really deleted.
		response = restTemplate.exchange(createURL("/" + id), HttpMethod.DELETE, entity, String.class);
		assertThat("Unexpected status", response.getStatusCode(), equalTo(HttpStatus.BAD_REQUEST));
		expected = TestUtils.objToJsonString(new ResponseMessage("Cannot delete Temperature with ID '" + id + "'. This Temperature doesn't exists"));
		JSONAssert.assertEquals("Unexpected JSON content", expected, response.getBody(), false);
		// Returns deleted record into database, because database is filled with data only once
		// at the start of first unit test because filling database over the api take time.
		addTemperature(data.getAllTemperatures().getLast());
	}

	private String createURL(String uri) {
		return "http://localhost:" + port + "/TempStatService/temperatures" + uri;
	}
}
