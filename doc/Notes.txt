Projekt na APIARY: 
https://app.apiary.io/tempstatservice/editor 

Obsah: Apiary.txt 

Git: https://github.com/Avatarek78/TempStatService#tempstatservice  propojeno s projektem v Apiary. 


JpaRepository rozšiřuje PagingAndSortingRepository , který zase rozšiřuje CrudRepository .

Jejich hlavní funkce jsou:

CrudRepository hlavně poskytuje funkce CRUD.
PagingAndSortingRepository poskytuje způsoby, jak provádět stránkování a třídění záznamů.
JpaRepository poskytuje některé metody související s JPA, jako je vyprázdnění kontextu vytrvalosti a odstranění záznamů v 

Složitější vlastní query v CrudRepository by měli jít dělat asi nějak takto: 
@Query("from Auction a join a.category c where c.name=:categoryName")
public Iterable<Auction> findByCategory(@Param("categoryName") String categoryName);

https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/


Pridal jsem si do application.properties H2 DB a asi bych ji potom pouzil i pro testy.

# H2
spring.h2.console.enabled=true
spring.h2.console.path=/h2
# Datasource
spring.datasource.url=jdbc:h2:file:~/test
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

Je tam hned vytvorena DB test a v ni se hned vytvori tabulka Temperature jen co se spusti appka.

Ted bych jeste tedy potreboval aby se pro JUnit testy natahl konfigurak napr. application.test.properties kde bych mel nakonfigurovanu tuto H2 DB a pro "Produkci" bych mel v 
application.properties nakonfigurovanu MySQL DB. 

V Postmanu to jde v pohodě
http://localhost:8080/TempStatService/temperatures 
Ale v Apiary mám problém, že i když mám nastaveno: 
HOST: http://localhost:8080/TempStatService
tak to používá pro production "https" a to samozřejmě nefunguje, takže možná přepnout tu svoji aplikaci na https?: 
po refreshi stránky s Apiary se to změnilo na http, takže OK.

2019-03-16 21:57:22.684 ERROR 10504 --- [  restartedMain] org.apache.catalina.util.LifecycleBase   : Failed to start component [Connector[HTTP/1.1-8443]]
org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1008) ~[tomcat-embed-core-9.0.16.jar:9.0.16]

Takto na přímo "localhost" to přes Apiary nepůjde, musí se tam udělat tunel např. takto: 
Použití ngrok: 
Stažení a instalace odsud: https://ngrok.com/download 
Spuštění tunelu: ngrok http 8080 
Bez registrace na stránkách funguje jen 8 hodin, ale to neva to mě na testování zatím stačí. 
A teď se konečně přes tento tunel dostanu na tu svoji appku. 
http://4e239c42.ngrok.io/TempStatService/temperatures 
webová konzole kde jsou nádherně také vidět všechny požadavky: http://127.0.0.1:4040/inspect/http 

http://localhost:8080/TempStatService/temperatures/statistics?lowTemp=22.55&highTemp=24.89
@GetMapping(path = "/statistics", params = {"lowTemp","highTemp"})
    public ResponseEntity<?> getLongestPeriodByMinAndMaxTemperature(@RequestParam Float lowTemp, @RequestParam Float highTemp) {
        ...
        return null;
    }

http://localhost:8080/TempStatService/temperatures/statistics?lowTemp=22.55&highTemp=24.89&hourFrom=13&hourTo=17
    @GetMapping(path = "/statistics", params = {"lowTemp","highTemp","hourFrom","hourTo"})
    public ResponseEntity<?> getLongestPeriodByMinMaxTemperatureAndDayPeriod(@RequestParam Float lowTemp,
                                                                             @RequestParam Float highTemp,
                                                                             @RequestParam Integer hourFrom,
                                                                             @RequestParam Integer hourTo) {
        ...
        return null;
    }
	
	
Co tahle na ten den použít toto? 
Extracting Date Parts
JPA doesn't define standard methods for extracting date and time parts but some JPA implementations, as well as ObjectDB, support such functions as an extension. ObjectDB supports 6 functions for extracting the YEAR, MONTH, DAY, HOUR, MINUTE and SECOND.

For example:

YEAR({d '2011-12-31'}) is evaluated to 2011.
MONTH({d '2011-12-31'}) is evaluated to 12.
DAY({d '2011-12-31'}) is evaluated to 31.
HOUR({t '23:59:00'}) is evaluated to 23.
MINUTE({t '23:59:00'}) is evaluated to 59.
SECOND({t '23:59:00'}) is evaluated to 0.

Toto funguje i na H2 DB, takže to bude asi nejlepší řešení: 
SELECT HOUR(DATE_AND_TIME) FROM TEMPERATURE 
Funguje to i na MySQL: 
SELECT HOUR(set_time) FROM sys.sys_config; 
SELECT HOUR(set_time) FROM sys.sys_config where HOUR(set_time) = 22;  

@Query("from Temperature t where t.temperature >= :lowTemp and t.temperature <= :highTemp")
    Iterable<Temperature> findByTempRange(@Param("lowTemp") Float lowTemp, @Param("highTemp") Float highTemp);

insert into Temperature (id,dateAndTime,temperature) values (1,"2019-03-20 17:40:10",20); 

************************************************************************************************************************************************************************
Místo základního CrudRepository bych použil PagingAndSortingRepository abych mohl stránkovat záznamy. Tím bych mohl prostou metodu getAllTemperatures vylepšit na metodu s podporou stránkování, protože samozřejmě 
pokud by bylo v DB několik milionů záznamů tak není vhodné aby se vybírali a vraceli všechny najednou. 
Pageable pageable = PageRequest.of(0, 3, Sort.by("dateAndTime").descending());
while(true){
          Page<Temperature> page = repo.findAll(pageable);
          System.out.println("Page no: "+page.getNumber());
          page.getContent().forEach(System.out::println);
          if(!page.hasNext()){
              break;
          }
          pageable = page.nextPageable();
      }
************************************************************************************************************************************************************************ 

Toto by se mohlo hodit na testovaci konfiguraci v JUnit testech: 
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("/testconfig.xml") 

@Configuration() pro testy musí také mít anotaci @Profile("test") 
a testy potom @ActiveProfiles("test")

Musím nastavit nejdřív testovací a potom i produkční DB tak aby se schéma vytvořilo samo. 
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create

Produkcni MySQL DB kterou to bude používat:
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=test
spring.datasource.password=


Takto je to funkcni vcetne vytvoreni databaze s nazvem "temp-stat-service-test": 
# H2 Database
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.generate-ddl=true
hibernate.hbm2ddl.auto=create
spring.h2.console.enabled=true
spring.h2.console.path=/h2

# H2 DataSource
spring.datasource.url=jdbc:h2:file:~/temp-stat-service-test
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver 

Produkcni: 
# MySQL DataSource
spring.datasource.url=jdbc:mysql://localhost:3306/tempstatservice?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

# Logging
logging.level.root=INFO

Použití docker kontejneru s MySQL databází místo H2-ky, která se nemusí chovat stejně! 
https://phauer.com/2017/dont-use-in-memory-databases-tests-h2/ 

Možné řešení "ostrovních" problémů při hledání té nejdelší periody teplot: Islands_problem.txt 

Pro případný vylepšený výpis dat pomocí stránkování: 
Pageable pageable = PageRequest.of(0, 1000, Sort.by("dateAndTime").ascending());
Page<Temperature> page = temperatureRepository.findAll(pageable);
Ještě bych také přidal metody na hledání dle data a času a dle hodnot teploty. 

0 = {Timestamp@9758} "2019-03-21 17:46:10.0"
1 = {Timestamp@9759} "2019-03-21 17:46:30.0"
2 = {Float@9760} 17.3447
3 = {Float@9761} 17.7572
4 = {BigInteger@9762} "3"
5 = "787"

Podrobne logovani SQL: 
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.root=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 

S testováním s H2 databází je problém, že se chová jinak než MySQL DB a to ohledně GROUP BY kdy v MySQL stačí seskupovat jen dle té mojí "grp" , ale H2 vyžaduje seskupování i dle date_and_time a to přes to, 
že tam je to tam použito jen v agregačních fcích. 

Group by by správně nemělo fungovat pokud v SELECT části dám * nebo sloupečky, které potom nejsou v GROUP BY části, ale agregační fce by tam měli být povoleny! 
Dle tohoto https://stackoverflow.com/questions/31596497/h2-db-column-must-be-in-group-by-list 
MySQL umožňuje i SELECT * FROM ... GROUP BY id např. což je prý chyba. Já ale v SELECT nemám žádné konkrétní sloupce, ale hodnoty z agregačních fcí: 
SELECT 	MIN(date_and_time) start
		MAX(date_and_time) end
		MIN(temp_value) minTemp
		MAX(temp_value) maxTemp
		COUNT(id) countOfMeasurements
tak proč to ta H2 nebere?

Odstranil jsem ORDER BY date_and_time DESC; a zdá se, že to bere.
Zase jiný problém H2 vrací ty hodnoty teplot jako Double a ne Float takže to vypadne tady:
TemperatureService.lambda$convertRawDataToTempPeriods$0(TemperatureService.java:125) na:
java.lang.ClassCastException: java.lang.Double cannot be cast to java.lang.Float

H2 vrací ty hodnoty teplot jako Double
0 = {Timestamp@6604} "2019-03-22 15:00:00.0"
1 = {Timestamp@6603} "2019-03-22 18:10:00.0"
2 = {Double@6602} 17.112754821777344
3 = {Double@6601} 17.927024841308594
4 = {BigInteger@6597} "20" 

Upravil jsem metodu aby brala obojí. 

Vyhodil jsem si inicializaci z TempStatServiceApplication

@Autowired
private TemperatureRepository temperatureRepository;

@Autowired
private TemperatureService temperatureService;

private LocalDateTime firstDate;
private LocalDateTime middleDate;
private LocalDateTime lastDate;
private LocalDateTime nextDate;

@EventListener(ApplicationReadyEvent.class)
public void afterStartup() {
	logger.info("TempStatServiceApplication started...");
	createDbTestData();
	Iterable<Object[]> period = temperatureRepository.findLongestPeriodByTempRange(17F, 18F);
	period.forEach(obj -> logger.info(Arrays.stream(obj)
			.filter(Objects::nonNull)
			.map(o -> o.toString())
			.collect(Collectors.joining(","))));

	TemperaturePeriod period = temperatureService.findLongestPeriodByTempRange(17F, 18F);
	logger.info("longest period by temp range 17-18: " + period.toString());
	period = temperatureService.findLongestPeriodByTempRangeAndDayPeriod(17F, 18F, 16, 17);
	logger.info("longest period by temp range 17-18 and hour range 14-15: " + period.toString());
}
	
private void createDbTestData() {
	initPeriods();
	LinkedList<Temperature> temperatures = TestUtils.createTestTemperatureCollection(
			firstDate, 1, 1000, 10, TimeUnit.SECONDS, 15F, 20F);

	temperatureRepository.deleteAll();
	temperatureRepository.saveAll(temperatures);
	logger.info("count=" + temperatureRepository.count());
	Iterable<Temperature> byTempRange = temperatureRepository.findByTempRange(22F, 24F);
	logger.info("byTempRange=" + byTempRange.spliterator().estimateSize());
}

private void initPeriods() {
	firstDate = TimeUtils.dateFromString("2019-03-21 15:00:00.000");
	middleDate = TimeUtils.dateFromString("2019-03-22 16:00:00.000");
	lastDate = TimeUtils.dateFromString("2019-03-23 17:00:00.000");
	nextDate = TimeUtils.dateFromString("2019-03-24 18:00:00.000");
}


Jeste me tam nesedi cas, protoze kdyz si dam pozadavek: 
http://localhost:8080/TempStatService/temperatures/?dateFrom=2019-03-23 15:00:00.000&dateTo=2019-03-23 16:00:00.000
tak me to vrati zaznamy s casy napr. 2019-03-23 14:30:23.000 
To bude tim UTC, ale bez toho to nejelo a s pokusy nastavit tam nasi aktualni casovou zonu jsem take nebyl moc uspesny.
spring.datasource.url=jdbc:mysql://localhost:3306/tempstatservice?createDatabaseIfNotExist=true&serverTimezone=UTC 

Pokud dám v MySQL SELECT @@time_zone; tak dostanu, že má SYSTEM což přesně chci... odstranil jsem tedy parametr serverTimezone=UTC z connection stringu. 
A dostanu opět: 
Caused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value 'Støední Evropa (bìný èas)' is unrecognized or represents more than one time zone. 
You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.

Z tohoto vygenerovaného základního testu vytvořím integrační test. 
@RunWith(SpringRunner.class)
@SpringBootTest
@Ignore("Test is slow")
public class TempStatServiceApplicationTests {

	@Test
	public void contextLoads() {
	}

}

*** DOCKERizace *** 

Problém s docker-compose ve Vagrantu: 
There are errors in the configuration of this machine. Please fix
the following errors and try again:
vm:
* The 'docker_compose' provisioner could not be found.

Nainstaloval jsem tento plugin a už to jede https://github.com/leighmcculloch/vagrant-docker-compose.


Problém s rozjetím virtuálky Debianu pro Docker image: 
WHvCapabilityCodeHypervisorPresent is FALSE! Make sure you have enabled the 'Windows Hypervisor Platform' feature. (VERR_NEM_NOT_AVAILABLE).
AMD-V is not available (VERR_SVM_NO_SVM).
Návratový kód: 
E_FAIL (0x80004005)
Komponenta: 
ConsoleWrap
Rozhraní: 
IConsole {872da645-4a9b-1727-bee2-5585105b9eed}
Řešení: 
"Zapnout nebo vypnout funkce systému Windows" -> Hyper-V  je zapnuté, což způsobuje nefunkčnost VirtualBoxu, který používá Vagrant -> vypnul jsem ho a restartoval -> OK virtuálka nabíhá. 

Appka se mě ve virtuálce spouští, ale má problémy s připojením k databázi: 
com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure
Zkusím si místo spuštění appky vypsat proměnné prostředí a zkontroluju, že je tam všechno OK. 

entrypoint: ["/usr/bin/java", "-jar", "-Dspring.profiles.active=default", "java/tempstatservice.jar"] -> entrypoint: ["env"] 
openjdk  | PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
openjdk  | HOSTNAME=be2f5f3d59bc
openjdk  | bootstrap.memory_lock=true
openjdk  | http.host=0.0.0.0
openjdk  | ES_JAVA_OPTS=-Xms512m -Xmx512m
openjdk  | SPRING_DATASOURCE_USERNAME=root
openjdk  | SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/tempstatservice?createDatabaseIfNotExist=true&serverTimezone=UTC
openjdk  | SPRING_DATASOURCE_PASSWORD=root
openjdk  | transport.host=127.0.0.1
openjdk  | cluster.name=docker-cluster
openjdk  | LANG=C.UTF-8
openjdk  | JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk
openjdk  | JAVA_VERSION=8u201
openjdk  | JAVA_ALPINE_VERSION=8.201.08-r0
openjdk  | HOME=/root

Změním url na DB z localhost na mysql a to jak v application.properies tak v docker-compose.yml, protože "mysql" je název docker kontejneru ve kterém běží databáze.

Takže pro vývoj budu používat DB na localhostu tím, že si přidám do spouštěcí konfigurace v IDE do VM Options: 
-Dspring.datasource.url=jdbc:mysql://localhost:3306/tempstatservice?createDatabaseIfNotExist=true&serverTimezone=UTC 

Zkusím to s docker-compose.yml bez těchto proměnných: 
- cluster.name=docker-cluster
- bootstrap.memory_lock=true
- ES_JAVA_OPTS=-Xms512m -Xmx512m
- transport.host=127.0.0.1
- http.host=0.0.0.0

HTTP GET

Zbavil jsem se používání testovacího souboru pro konfiguraci application-test.properties a prostě jsem to dal přímo do třídy MemDbTestConfig ty potřebné hodnoty. 

{"id":1,"dateAndTime":"2019-03-21 11:00:00.000","tempValue":21.249077}

{"id":4,"dateAndTime":"2020-08-06 18:48:00.990","tempValue":3.57478} 

/**
 * TODO: Místo základního CrudRepository jsem použil PagingAndSortingRepository, abych mohl stránkovat záznamy.
 * Tím bych mohl prostou metodu getAllTemperatures vylepšit na metodu s podporou stránkování, protože samozřejmě
 * pokud by bylo v DB několik milionů záznamů tak není vhodné aby se vybírali a vraceli všechny najednou.
 * Takže bych možná přidělal metodu pro stránkování jako další metodu pro výpis hodnot kromě jednoduchého findAll.
 */
 
Finální úpravy: 

TempStatService application 
- Added Docker configuration 
- Added maven release-for-docker configuration
- Added logging configuration
- Added integration test
- Moved test specific helper classes from src to test folder
- Updated README.md 
- Added or updated comments
- Removed some unnecessary files
